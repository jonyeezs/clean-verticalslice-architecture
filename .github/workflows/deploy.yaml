name: deploy
run-name: Deploying to ECR triggered by commit "${{ github.event.head_commit.message }}"(${{ github.sha }})
on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'tests/**'
      - 'infrastructure/Dockerfile'
      - '.github/workflows/**'
env:
  artificate-token: ${{ github.run_id }}-${{ github.run_attempt }}
  aws-region: ap-southeast-2
  aws-iam: arn:aws:iam::467945566648:oidc-provider/token.actions.GitHubusercontent.com
  ECR_REPOSITORY: dotnetarchitecture-ecr-repo
  IMAGE_NAME: clean-slice
  IMAGE_TAG: ${{ github.sha }}
jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    outputs:
      publish: ${{ steps.publish.outputs.dir }}
    steps:
      - name: Check out Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 7.x
      - name: Restore
        shell: bash
        env:
          GITHUB_TOKEN: ${{ github.token }}
          REGISTRY_TOKEN: ${{ github.token }}
        run: make restore

      - name: publish
        id: publish
        shell: bash
        run: make publish

      - name: Upload published file
        uses: actions/upload-artifact@v3
        with:
          name: dll-artifacts-${{ env.artificate-token }}
          path: .publish/

      - name: Upload makefile
        uses: actions/upload-artifact@v3
        with:
          name: makefile-${{ env.artificate-token }}
          path: makefile

  dockerize:
    needs: build-and-publish
    runs-on: ubuntu-latest
    steps:
      - name: Download published file
        uses: actions/download-artifact@v2
        with:
          name: dll-artifacts-${{ env.artificate-token }}
          path: ./.publish

      - name: Download makefile
        uses: actions/download-artifact@v2
        with:
          name: makefile-${{ env.artificate-token }}
          path: makefile

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.aws-iam }}
          aws-region: ${{ env.aws-region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build image
        id: image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: make image IMAGE_NAME=${IMAGE_NAME} IMAGE_TAG=${IMAGE_TAG}

      - name: Tag and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: make image-push IMAGE_NAME=${IMAGE_NAME} IMAGE_REPOSITORY=${REGISTRY} IMAGE_TAG=${IMAGE_TAG}

  deploy:
    needs: dockerize
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.aws-iam }}
          aws-region: ${{ env.aws-region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./infrastructure/ecs-task-definition.json
          container-name: ${{ env.IMAGE_NAME }}
          image: ${{env.REGISTRY}}/${{env.IMAGE_NAME}}:${{env.IMAGE_TAG}}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.IMAGE_NAME }}
          cluster: ${{ env.IMAGE_NAME }}-cluster
          wait-for-service-stability: true
